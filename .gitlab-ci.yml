default:
  image: docker.io/library/node:20
  cache:
    key:
      files:
        - package-lock.json
    paths:
      - .npm/
      - node_modules
      - .next/cache
  before_script:
    - npm ci --cache .npm --prefer-offline

stages:
  - test
  - build
  - deploy

audit:
  stage: test
  script:
    - npm audit
  allow_failure: true

lint:
  stage: test
  script:
    - npm run lint

test:
  stage: test
  script:
    - npm run test
  artifacts:
    reports:
      junit: [junit.xml]
      coverage_report:
        coverage_format: cobertura
        path: coverage/cobertura-coverage.xml

build:
  stage: build
  script:
    - curl -o src/app/meta.json $EVENT_INFO_URL
    - curl -o src/app/events.json $TOPICS_URL
    - curl -o src/app/timetable.json $TIMETABLE_URL
    - node ./hacks/generate-opass-timetable.js
    - npm run build
    - cp out/404/index.html out/404.html
    - rm -rf out/404
    - find out -type f -regex '.*\.\(htm\|html\|txt\|text\|js\|css\)$' -exec gzip -f -k {} \;
  artifacts:
    paths:
      - out

pages:
  stage: deploy
  needs:
    - job: build
      artifacts: true
  image: docker.io/library/ubuntu:22.04
  before_script:
    - apt-get update && apt-get install brotli -y
  script:
    - cp -r out public
    - find public -type f -regex '.*\.\(htm\|html\|txt\|text\|js\|css\)$' -exec brotli -f -k {} \;
  artifacts:
    paths:
      - public
  rules:
    - if: $CI_COMMIT_BRANCH == 'main'
    - if: $CI_COMMIT_BRANCH == 'develop'
  environment:
    name: staging

deploy:github-page:
  stage: deploy
  needs:
    - job: build
      artifacts: true
  script:
    - cp -r out public
    - bash ./.gitlab/scripts/deploy-github-pages.sh
  rules:
    - if: $CI_COMMIT_BRANCH == 'main'
  environment:
    name: production
